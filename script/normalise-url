#!/usr/bin/env ruby

# Whitelisted grammar providers
HOSTS = %w[
	github.com
	gitlab.com
	bitbucket.org
]

# Construct a well-formed URL from the output of `parse_url()`
def build_url(hash)
	path = "#{hash[:user]}/#{hash[:repo]}.git"
	if hash[:protocol] == "ssh"
		"git@#{hash[:host]}:#{path}"
	else
		"#{hash[:protocol]}://#{hash[:host]}/#{path}"
	end
end

# Break a repository URL into its separate components
def parse_url(input)
	hosts = %r[#{HOSTS.map {|x| Regexp.escape x}.join "|"}]i

	# HTTPS/HTTP link pointing to recognised hosts
	if input =~ %r[^
		(?:
			(?<protocol> https?|ssh|git)
			(?:\+(?:git|ssh))? # Allowed, but deprecated
		)? :* /*
		(?:[^.@]*@)?
		(?:www\.)?
		(?<host> #{hosts}) /+
		(?<user> [^:@/]+)  /+
		(?<repo> [^:@/]+)
		(?:\.git)? (?=$|[/#])
	]ix; {
		protocol: ($~[:protocol] or "https").downcase,
		host: $~[:host].downcase,
		user: $~[:user],
		repo: $~[:repo]
	}

	# SSH
	elsif input =~ %r[^
		git (?:\+(?:ssh|https?))? @
		(?:www\.)?
		(?<host> #{hosts}) :/*
		(?<user> [^:@/]+) /+
		(?<repo> [^:@/]+)
		(?:\.git)? /*$
	]ix; {
		protocol: "ssh",
		host: $~[:host].downcase,
		user: $~[:user],
		repo: $~[:repo]
	}

	# provider:user/repo
	elsif input =~ %r[^
		(?<host>
			gh | github |
			gl | gitlab |
			bb | bitbucket
		) :/*
		(?<user> [^:@/]+) /+
		(?<repo> [^:@/]+)
		(?:\.git)? /*$
	]ix; {
		protocol: "https",
		host: (case $~[:host].downcase
			when "gh", "github";    "github.com"
			when "gl", "gitlab";    "gitlab.com"
			when "bb", "bitbucket"; "bitbucket.org"
		end),
		user: $~[:user],
		repo: $~[:repo]
	}

	# user/repo - Common GitHub shorthand
	elsif input =~ %r[^
		/*
		(?<user> [^:@/]+) /+
		(?<repo> [^:@/]+)
		(?:\.git)? /*$
	]ix; {
		protocol: "https",
		host: "github.com",
		user: $~[:user],
		repo: $~[:repo]
	}

	# Not something we recognise
	else
		raise "Unsupported URL: #{input}"
	end
end


require "optparse"
$json     = false
$protocol = nil

OptionParser.new do |opts|
	opts.banner = <<~END
	#{$0}: Resolve a repository URL from various formats

	Usage:
	    #{$0} [-p|--protocol name] ...urls
	    #{$0} [-j|--json] ...urls
	    #{$0} [-h|--hosts]

	Examples:
	   $ #{$0} Alhadis/language-etc BB:user/name
	  => https://github.com/Alhadis/language-etc.git
	     https://bitbucket.org/user/name.git

	Options:
	END
	opts.on("-h", "--hosts", "Print a list of whitelisted grammar hosts, then exit") do
		puts HOSTS.join $/
		exit
	end
	opts.on("-j", "--json", "Output parsed URLs as an array of JSON objects") do
		$json = true
	end
	opts.on("-pNAME", "--protocol=NAME", "Force URLs to use a protocol, even if different. Ignored for JSON output.") do |name|
		$protocol = name.to_s.downcase
	end
end.parse!

if $json
	require "json"
	puts JSON.pretty_generate ARGV.map {|x| parse_url x}, {indent: "\t"}
else
	ARGV.each do |arg|
		url = parse_url arg
		url[:protocol] = $protocol unless $protocol.nil?
		puts build_url(url)
	end
end
